
.def	INT_SETDIR	0
.def	INT_LMAN	1
.def	INT_LMAN2	2
.def	INT_SELF	3
.def	INT_GSTART	4
.def	INT_GHOST	5
.def	INT_GSTAT	6
.def	INT_MAP		7
.def	INT_DUMP	8

.def	DIR_UP		0
.def	DIR_RIGHT	1
.def	DIR_DOWN	2
.def	DIR_LEFT	3


.macro	call target sp=h
	dec \sp
	mov [\sp],PC
	mov PC,\target
.endm

.macro	ret sp=h scratch=SCRATCH
	mov \scratch,[\sp]
	inc \sp
	add \scratch,2
	mov PC,\scratch
.endm

.macro	dump
	int INT_DUMP
.endm


.loc	255
.var	SCRATCH

.loc	0
.var	FLAGS

.def	FL_INIT		0x80

.var	GHOSTS

.var	LMAN_X
.var	LMAN_Y

.var	SELF_X
.var	SELF_Y
.var	SELF_V
.var	SELF_D				; probably not used
.var	SELF_M

.var	JUNC_X
.var	JUNC_Y
.var	JUNC_M




	jeq $init,FLAGS,0		; test if uninitialized
$move:
	mov h,-1			; call stack

	int INT_SELF			; fetch our position
	int INT_GHOST
	mov SELF_X,a			; save it
	mov SELF_Y,b

	call $map_check			; check map options

	jlt $no_choice,MAP_DIRS,3	; do we have a choice?

;;;;;;; we have a choice!!

	int INT_SELF			; fetch our status
	int INT_GSTAT
	mov SELF_V,a
	mov SELF_D,b

	call $mask_from_dir		; create movement mask
	mov SELF_M,a

	int INT_LMAN			; fetch lman position
	mov LMAN_X,a			; save it
	mov LMAN_Y,b

	call $calc_vector		; calculate vector/dir


	jeq $same|x,SELF_X,JUNC_X	; same junction?
	bra $diff
$same|x:
	jeq $same|y,SELF_Y,JUNC_Y
	bra $diff
$same|y:

;;;;;;; we are at the same junction!!

	xor SELF_M,3			; invert mask
	and JUNC_M,SELF_M		; avoid this dir

	mov a,JUNC_M
	bra $decision

$diff:

	mov JUNC_X,SELF_X		; record junction
	mov JUNC_Y,SELF_Y
	mov JUNC_M,MAP_MASK
	xor SELF_M,3			; invert mask
	and JUNC_M,SELF_M		; avoid this dir

	mov f,e
	and f,JUNC_M

	dump

	mov a,e


$decision:
	call $dir_from_mask
	int INT_SETDIR

	hlt




$no_choice:				; do something else
	hlt



;;;;;;; -------------------------------------------------------------
;;;;;;; includes
;;;;;;; -------------------------------------------------------------

.set	@a0	b
.set	@r0	a

.include "mask_from_dir.inc"

	hlt

;;;;;;; -------------------------------------------------------------

.set	@a0	a
.set	@r0	a

.include "dir_from_mask.inc"

	hlt

;;;;;;; -------------------------------------------------------------

.var	MAP_MASK
.var	MAP_DIRS

.set	@r0	MAP_MASK
.set	@r1	MAP_DIRS
.set	@s0	SCRATCH

.include "map_check.inc"

	hlt

;;;;;;; -------------------------------------------------------------

.set	@a0	SELF_X
.set	@a1	SELF_Y
.set	@a2	a
.set	@a3	b
.set	@r0	c
.set	@r1	d
.set	@r2	e

.include "calc_vector.inc"

	hlt

;;;;;;; -------------------------------------------------------------


;;;;;;; -------------------------------------------------------------
;;;;;;; init function
;;;;;;; -------------------------------------------------------------

$init:

;;;;;;; code to check for the total number of ghosts by
;;;;;;; testing from 255 down to 0 till we get a direction

	mov b,-1		; illegal direction
$gc_loop:
	dec a
	dec GHOSTS		; count down
	int INT_GSTAT		; check for ghost
	jeq $gc_loop,b,-1	; continue until last ghost


;;;;;;; end of init routine, mark as executed.

	or  FLAGS,FL_INIT	; mark init is done
	mov pc,$move		; continue with move?

.end
